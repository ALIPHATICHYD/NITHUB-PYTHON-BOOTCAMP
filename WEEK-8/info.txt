OTHER OPERATORS IN PYTHON

* What is a List Comprehension?

A List comprehension is a concise way to create a new list by applying an expression to each element of an existing list or iterable.
It is a more efficient and readable way of writing simple loops that create lists. It consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses.

The Syntax for a List Comprehension is:

[expression for item in list]

* Uses Of List Comprehension

List comprehensions have a variety of uses in Python. Some of them include:

1. List Comprehension can be used to flatten a nested list.

Example:

nested_list = [[1, 2], [3, 4], [5, 6]]
flattened_list = [x for sublist in nested_list for x in sublist]
print(flattened_list) # Output: [1, 2, 3, 4, 5, 6]


2. List Comprehension can be used to create a new list of elements that satisfy a given condition.

Example:
For example, filtering a list based on a condition.
numbers = [1, 2, 3, 4, 5]
even_numbers = [x for x in numbers if x % 2 == 0]
print(even_numbers) # Output: [2, 4]


3. List Comprehension can be used to create a new list of numbers, strings, booleans, or any other data type.
Example:
For example, creating a list of tuples from two existing lists.
names = ['Alice', 'Bob', 'Charlie']
ages = [25, 30, 35]
people = [(name, age) for name, age in zip(names, ages)]
print(people) # Output: [('Alice', 25), ('Bob', 30), ('Charlie', 35)]

List comprehension can be used in many other ways depending on the specific use case.
It is a powerful tool in Python that can help make code more concise and readable.